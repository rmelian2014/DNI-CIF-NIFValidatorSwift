//
//  AlgoritmsForJudge2Tests.swift
//  AlgoritmsForJudge2Tests
//
//  Created by Reinier Melian on 6/25/16.
//  Copyright Â© 2016 Reinier Melian. All rights reserved.
//

import XCTest
@testable import AlgoritmsForJudge2

class AlgoritmsForJudge2Tests: XCTestCase {
    
    /*override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testExample() {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }
    
    func testPerformanceExample() {
        // This is an example of a performance test case.
        self.measureBlock {
            // Put the code you want to measure the time of here.
        }
    }*/
    
    //GRAB TESTS
    /*func testEqui()
    {
        let equiProblem = Equi()
        self.measureBlock {
        XCTAssert(equiProblem.solution([-1,3,-4,5,1,-6,2,1], N: 8) == 1,"wrong answer")
        XCTAssert(equiProblem.solution([155000000,152314111,-4,5,1,-6,2,1], N: 8) == -1,"wrong answer")
        }
    }
    
    func testTwoSum()
    {
        let twoSumProblem = TwoSum()
        self.measureBlock { 
            XCTAssert(twoSumProblem.twoSum([2,7,11,15],9).elementsEqual([0,1]),"wrong answer")
        }
    }*/
    
    func testAddTwoNumbers()
    {
        let addTwoNumbers = AddTwoNumbers()
        let linkList1 = addTwoNumbers.createListWithDigits(digits: [9,9])
        let linkList2 = addTwoNumbers.createListWithDigits(digits: [1])
        let linkResult = addTwoNumbers.addTwoNumbers(linkList1!, linkList2!)
        print(linkResult)
    }
    
    func testPartitionEqualSubSetSum()
    {
        let partition = PartitionEqualSubSetSum()
        self.measure {
        XCTAssert(partition.canPartition2([1, 5, 11, 5]) == true,"wrong answer")
        XCTAssert(partition.canPartition2([1, 2, 3, 5]) == false,"wrong answer")
        XCTAssert(partition.canPartition2([5, 2, 4, 5, 2]) == true,"wrong answer")
        XCTAssert(partition.canPartition2([5, 10, 4, 5, 2,4,4]) == true,"wrong answer")
        XCTAssert(partition.canPartition2([8, 12]) == false,"wrong answer")
        XCTAssert(partition.canPartition2([8, 12,15,15,16,14,10]) == true,"wrong answer")
        XCTAssert(partition.canPartition2([8, 12,45,45]) == false,"wrong answer")
        XCTAssert(partition.canPartition2([1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,100,99,100]) == true,"wrong answer")
        }
    }
    
    func testGrabProblem4()
    {
        let grabProblem4 = GrabProblem4()
        XCTAssert(grabProblem4.solution(7, andInt: 42, andArray: [6,42,11,7,1,42]) == 4,"wrong answer")
        XCTAssert(grabProblem4.solution(1, andInt: 2, andArray: [1,1,1,2,2,42]) == -1,"wrong answer")
        XCTAssert(grabProblem4.solution(1, andInt: 2, andArray: [1,0,2,9,2,42]) == 3,"wrong answer")
        XCTAssert(grabProblem4.solution(1, andInt: 2, andArray: [1,1,1,2,2,2]) == 5,"wrong answer")
        XCTAssert(grabProblem4.solution(1, andInt: 2, andArray: []) == -1,"wrong answer")
        XCTAssert(grabProblem4.solution(71, andInt: 70, andArray: [1,89,3,4,52,2,1]) == -1,"wrong answer")
    }
    
    func testGrabProblem1()
    {
        let grabProblem1 = GrabProblem1()
        XCTAssert(grabProblem1.solution(4, 17) == 3,"wrong answer")
        XCTAssert(grabProblem1.solution2(4, 17) == 3,"wrong answer")
        XCTAssert(grabProblem1.solution2(0, 100) == 10,"wrong answer")
    }
    
    func testGrabProblem2()
    {
        let grabProblem2 = GrabProblem2()
        XCTAssert(grabProblem2.solution(1, "") == 3,"wrong answer")
        XCTAssert(grabProblem2.solution(1, "1D 1G 1H") == 1,"wrong answer")
        XCTAssert(grabProblem2.solution(10, "1D 1G 1H 2B 5G") == 27,"wrong answer")
    }
    
    
    /*func testGrabProblem2()
    {
        let grabProblem2 = GrabProblem2()
        XCTAssert(grabProblem2.solution(
        
    }*/
    
    func testUtils()
    {
        XCTAssert(Utils.descomponer(1542447112).elementsEqual([1,5,4,2,4,4,7,1,1,2]), "wrong answer")
        XCTAssert(Utils.descomponer(0).elementsEqual([0]), "wrong answer")
        XCTAssert(Utils.descomponer(10).elementsEqual([1,0]), "wrong answer")
        XCTAssert(Utils.descomponer(100).elementsEqual([1,0,0]), "wrong answer")
        XCTAssert(Utils.descomponer(1000).elementsEqual([1,0,0,0]), "wrong answer")
        XCTAssert(Utils.descomponer(10000).elementsEqual([1,0,0,0,0]), "wrong answer")
        XCTAssert(Utils.descomponer(100000).elementsEqual([1,0,0,0,0,0]), "wrong answer")
        XCTAssert(Utils.descomponer(1000000).elementsEqual([1,0,0,0,0,0,0]), "wrong answer")
        XCTAssert(Utils.descomponer(0010101).elementsEqual([1,0,1,0,1]), "wrong answer")
        XCTAssert(Utils.descomponer(105).elementsEqual([1,0,5]), "wrong answer")
    }
    
    func testSumDigits(){
        let sumDigits = AddDigits()
        
        self.measure {
            XCTAssert(sumDigits.addDigits(1524356847) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(0000000) == 0, "wrong answer")
            XCTAssert(sumDigits.addDigits(1000000) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(1001001) == 3, "wrong answer")
            XCTAssert(sumDigits.addDigits(111111111) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(1) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(10) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(999999999) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(987600000) == 3, "wrong answer")
            XCTAssert(sumDigits.addDigits(1524356847) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(0000000) == 0, "wrong answer")
            XCTAssert(sumDigits.addDigits(1000000) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(1001001) == 3, "wrong answer")
            XCTAssert(sumDigits.addDigits(111111111) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(1) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(10) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(999999999) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(987600000) == 3, "wrong answer")
            XCTAssert(sumDigits.addDigits(1524356847) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(0000000) == 0, "wrong answer")
            XCTAssert(sumDigits.addDigits(1000000) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(1001001) == 3, "wrong answer")
            XCTAssert(sumDigits.addDigits(111111111) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(1) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(10) == 1, "wrong answer")
            XCTAssert(sumDigits.addDigits(999999999) == 9, "wrong answer")
            XCTAssert(sumDigits.addDigits(987600000) == 3, "wrong answer")
        }
    }
    
    func testSumTwoIntegers()
    {
        let sum = SumTwoIntegers()
        self.measure {
            XCTAssert(sum.getSum(0, 3) == 3, "wrong answer")
            XCTAssert(sum.getSum(0, 0) == 0, "wrong answer")
            XCTAssert(sum.getSum(100, 0) == 100, "wrong answer")
            XCTAssert(sum.getSum(100, 100) == 200, "wrong answer")
            XCTAssert(sum.getSum(10000, 100000) == 110000, "wrong answer")
            XCTAssert(sum.getSum(251410, 251410) == 502820, "wrong answer")
            XCTAssert(sum.getSum(500, 50000000) == 50000500, "wrong answer")
            XCTAssert(sum.getSum(0, 3) == 3, "wrong answer")
            XCTAssert(sum.getSum(0, 0) == 0, "wrong answer")
            XCTAssert(sum.getSum(100, 0) == 100, "wrong answer")
            XCTAssert(sum.getSum(100, 100) == 200, "wrong answer")
            XCTAssert(sum.getSum(10000, 100000) == 110000, "wrong answer")
            XCTAssert(sum.getSum(251410, 251410) == 502820, "wrong answer")
            XCTAssert(sum.getSum(500, 50000000) == 50000500, "wrong answer")
            XCTAssert(sum.getSum(202, 50000000) == 50000202, "wrong answer")
            XCTAssert(sum.getSum(202, 50000003) == 50000205, "wrong answer")
            XCTAssert(sum.getSum(208, 50000002) == 50000210, "wrong answer")
            XCTAssert(sum.getSum(500000000, 500000000) == 1000000000, "wrong answer")
            //XCTAssert(sum.getSum(5000000000, 5000000000) == 10000000000, "wrong answer")
        }
    }
    
    func testValidPalindrome()
    {
        let palindrome = ValidPalindrome()
        XCTAssert(palindrome.isPalindrome("A man, a plan, a canal: Panama") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("    ") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome(" ") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("race a car") == false, "wrong answer")
        XCTAssert(palindrome.isPalindrome("race a ecar") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("race ecar") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("r") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("rr") == true, "wrong answer")
        XCTAssert(palindrome.isPalindrome("ra") == false, "wrong answer")
        XCTAssert(palindrome.isPalindrome("ra") == false, "wrong answer")
        
        /*self.measureBlock {
         XCTAssert(palindrome.isPalindrome("A man, a plan, a canal: Panama") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("    ") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome(" ") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race a car") == false, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race a ecar") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race ecar") == true, "wrong answer")
         }*/
        
    }
    
    func testCasiPalindrome()
    {
        let casiPalindrome = CasiPalindrome()
        XCTAssert(casiPalindrome.isCasiPalindrome("abccba") == true, "wrong answer")
        XCTAssert(casiPalindrome.isCasiPalindrome("abcxba") == true, "wrong answer")
        XCTAssert(casiPalindrome.isCasiPalindrome("abcxscsaacba") == false, "wrong answer")
        /*XCTAssert(palindrome.isPalindrome("A man, a plan, a canal: Panama") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("    ") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome(" ") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race a car") == false, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race a ecar") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race ecar") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("r") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("rr") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("ra") == false, "wrong answer")
         XCTAssert(palindrome.isPalindrome("ra") == false, "wrong answer")*/
        
        /*self.measureBlock {
         XCTAssert(palindrome.isPalindrome("A man, a plan, a canal: Panama") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("    ") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome(" ") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race a car") == false, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race a ecar") == true, "wrong answer")
         XCTAssert(palindrome.isPalindrome("race ecar") == true, "wrong answer")
         }*/
        
    }

    
    func testExcelColumnHeader()
    {
        let excel = ExcelSheetColumTitle()
        self.measure {
            XCTAssert(excel.convertToTitle(15) == "O", "wrong answer")
            XCTAssert(excel.convertToTitle(30) == "AD", "wrong answer")
            XCTAssert(excel.convertToTitle(26) == "Z", "wrong answer")
            XCTAssert(excel.convertToTitle(27) == "AA", "wrong answer")
            XCTAssert(excel.convertToTitle(50) == "AX", "wrong answer")
            XCTAssert(excel.convertToTitle(52) == "AZ", "wrong answer")
            XCTAssert(excel.convertToTitle(78) == "BZ", "wrong answer")
            XCTAssert(excel.convertToTitle(100) == "CV", "wrong answer")
            XCTAssert(excel.convertToTitle(110) == "DF", "wrong answer")
            XCTAssert(excel.convertToTitle(120) == "DP", "wrong answer")
            XCTAssert(excel.convertToTitle(104) == "CZ", "wrong answer")
            XCTAssert(excel.convertToTitle(130) == "DZ", "wrong answer")
            XCTAssert(excel.convertToTitle(140) == "EJ", "wrong answer")
            XCTAssert(excel.convertToTitle(150) == "ET", "wrong answer")
            XCTAssert(excel.convertToTitle(125) == "DU", "wrong answer")
            XCTAssert(excel.convertToTitle(1) == "A", "wrong answer")
            XCTAssert(excel.convertToTitle(170) == "FN", "wrong answer")
            XCTAssert(excel.convertToTitle(220) == "HL", "wrong answer")
            XCTAssert(excel.convertToTitle(234) == "HZ", "wrong answer")
            XCTAssert(excel.convertToTitle(260) == "IZ", "wrong answer")
            XCTAssert(excel.convertToTitle(310) == "KX", "wrong answer")
            XCTAssert(excel.convertToTitle(416) == "OZ", "wrong answer")
            XCTAssert(excel.convertToTitle(500) == "SF", "wrong answer")
            XCTAssert(excel.convertToTitle(598) == "VZ", "wrong answer")
            XCTAssert(excel.convertToTitle(703) == "AAA", "wrong answer")
            XCTAssert(excel.convertToTitle(810) == "AED", "wrong answer")
            XCTAssert(excel.convertToTitle(966) == "AKD", "wrong answer")
            XCTAssert(excel.convertToTitle(1081) == "AOO", "wrong answer")
            XCTAssert(excel.convertToTitle(1346) == "AYT", "wrong answer")
            XCTAssert(excel.convertToTitle(1378) == "AZZ", "wrong answer")
            XCTAssert(excel.convertToTitle(1453) == "BCW", "wrong answer")
            XCTAssert(excel.convertToTitle(1654) == "BKP", "wrong answer")
            XCTAssert(excel.convertToTitle(1894) == "BTV", "wrong answer")
            XCTAssert(excel.convertToTitle(2054) == "BZZ", "wrong answer")
            XCTAssert(excel.convertToTitle(2563) == "CTO", "wrong answer")
            XCTAssert(excel.convertToTitle(16383) == "XFC", "wrong answer")
            XCTAssert(excel.convertToTitle(16384) == "XFD", "wrong answer")
            XCTAssert(excel.convertToTitle(100000) == "EQXD", "wrong answer")
            XCTAssert(excel.convertToTitle(1000000) == "BDWGN", "wrong answer")
            XCTAssert(excel.convertToTitle(10000000) == "UVXWJ", "wrong answer")
            XCTAssert(excel.convertToTitle(321272406) == "ZZZZZZ", "wrong answer")
        }
        
        //
        
    }
    
    func testExcelColumnHeader2()
    {
        let excel = ExcelSheetColumTitle()
        self.measure {
            XCTAssert(excel.convertToTitle2(15) == "O", "wrong answer")
            XCTAssert(excel.convertToTitle2(30) == "AD", "wrong answer")
            XCTAssert(excel.convertToTitle2(26) == "Z", "wrong answer")
            XCTAssert(excel.convertToTitle2(27) == "AA", "wrong answer")
            XCTAssert(excel.convertToTitle2(50) == "AX", "wrong answer")
            XCTAssert(excel.convertToTitle2(52) == "AZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(78) == "BZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(100) == "CV", "wrong answer")
            XCTAssert(excel.convertToTitle2(110) == "DF", "wrong answer")
            XCTAssert(excel.convertToTitle2(120) == "DP", "wrong answer")
            XCTAssert(excel.convertToTitle2(104) == "CZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(130) == "DZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(140) == "EJ", "wrong answer")
            XCTAssert(excel.convertToTitle2(150) == "ET", "wrong answer")
            XCTAssert(excel.convertToTitle2(125) == "DU", "wrong answer")
            XCTAssert(excel.convertToTitle2(1) == "A", "wrong answer")
            XCTAssert(excel.convertToTitle2(170) == "FN", "wrong answer")
            XCTAssert(excel.convertToTitle2(220) == "HL", "wrong answer")
            XCTAssert(excel.convertToTitle2(234) == "HZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(260) == "IZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(310) == "KX", "wrong answer")
            XCTAssert(excel.convertToTitle2(416) == "OZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(500) == "SF", "wrong answer")
            XCTAssert(excel.convertToTitle2(598) == "VZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(703) == "AAA", "wrong answer")
            XCTAssert(excel.convertToTitle2(810) == "AED", "wrong answer")
            XCTAssert(excel.convertToTitle2(966) == "AKD", "wrong answer")
            XCTAssert(excel.convertToTitle2(1081) == "AOO", "wrong answer")
            XCTAssert(excel.convertToTitle2(1346) == "AYT", "wrong answer")
            XCTAssert(excel.convertToTitle2(1378) == "AZZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(1453) == "BCW", "wrong answer")
            XCTAssert(excel.convertToTitle2(1654) == "BKP", "wrong answer")
            XCTAssert(excel.convertToTitle2(1894) == "BTV", "wrong answer")
            XCTAssert(excel.convertToTitle2(2054) == "BZZ", "wrong answer")
            XCTAssert(excel.convertToTitle2(2563) == "CTO", "wrong answer")
            XCTAssert(excel.convertToTitle2(16383) == "XFC", "wrong answer")
            XCTAssert(excel.convertToTitle2(16384) == "XFD", "wrong answer")
            XCTAssert(excel.convertToTitle2(100000) == "EQXD", "wrong answer")
            XCTAssert(excel.convertToTitle2(1000000) == "BDWGN", "wrong answer")
            XCTAssert(excel.convertToTitle2(10000000) == "UVXWJ", "wrong answer")
            XCTAssert(excel.convertToTitle2(321272406) == "ZZZZZZ", "wrong answer")
        }
    }
    
    
    func testReverseExcelColumnHeader()
    {
        let excel = ExcelSheetColumTitle()
        self.measure {
            XCTAssert(excel.convertFromTitle("O") == 15, "wrong answer")
            XCTAssert(excel.convertFromTitle("AD") == 30, "wrong answer")
            XCTAssert(excel.convertFromTitle("Z") == 26, "wrong answer")
            XCTAssert(excel.convertFromTitle("AA") == 27, "wrong answer")
            XCTAssert(excel.convertFromTitle("AX") == 50, "wrong answer")
            XCTAssert(excel.convertFromTitle("AZ") == 52, "wrong answer")
            XCTAssert(excel.convertFromTitle("BZ") == 78, "wrong answer")
            XCTAssert(excel.convertFromTitle("CV") == 100, "wrong answer")
            XCTAssert(excel.convertFromTitle("DF") == 110, "wrong answer")
            XCTAssert(excel.convertFromTitle("DP") == 120, "wrong answer")
            XCTAssert(excel.convertFromTitle("CZ") == 104, "wrong answer")
            XCTAssert(excel.convertFromTitle("DZ") == 130, "wrong answer")
            XCTAssert(excel.convertFromTitle("EJ") == 140, "wrong answer")
            XCTAssert(excel.convertFromTitle("ET") == 150, "wrong answer")
            XCTAssert(excel.convertFromTitle("DU") == 125, "wrong answer")
            XCTAssert(excel.convertFromTitle("A") == 1, "wrong answer")
            XCTAssert(excel.convertFromTitle("FN") == 170, "wrong answer")
            XCTAssert(excel.convertFromTitle("HL") == 220, "wrong answer")
            XCTAssert(excel.convertFromTitle("HZ") == 234, "wrong answer")
            XCTAssert(excel.convertFromTitle("IZ") == 260, "wrong answer")
            XCTAssert(excel.convertFromTitle("KX") == 310, "wrong answer")
            XCTAssert(excel.convertFromTitle("OZ") == 416, "wrong answer")
            XCTAssert(excel.convertFromTitle("SF") == 500, "wrong answer")
            XCTAssert(excel.convertFromTitle("VZ") == 598, "wrong answer")
            XCTAssert(excel.convertFromTitle("AAA") == 703, "wrong answer")
            XCTAssert(excel.convertFromTitle("AED") == 810, "wrong answer")
            XCTAssert(excel.convertFromTitle("AKD") == 966, "wrong answer")
            XCTAssert(excel.convertFromTitle("AOO") == 1081, "wrong answer")
            XCTAssert(excel.convertFromTitle("AYT") == 1346, "wrong answer")
            XCTAssert(excel.convertFromTitle("AZZ") == 1378, "wrong answer")
            XCTAssert(excel.convertFromTitle("BCW") == 1453, "wrong answer")
            XCTAssert(excel.convertFromTitle("BKP") == 1654, "wrong answer")
            XCTAssert(excel.convertFromTitle("BTV") == 1894, "wrong answer")
            XCTAssert(excel.convertFromTitle("BZZ") == 2054, "wrong answer")
            XCTAssert(excel.convertFromTitle("CTO") == 2563, "wrong answer")
            XCTAssert(excel.convertFromTitle("XFC") == 16383, "wrong answer")
            XCTAssert(excel.convertFromTitle("XFD") == 16384, "wrong answer")
            XCTAssert(excel.convertFromTitle("EQXD") == 100000, "wrong answer")
            XCTAssert(excel.convertFromTitle("BDWGN") == 1000000, "wrong answer")
            XCTAssert(excel.convertFromTitle("UVXWJ") == 10000000, "wrong answer")
            XCTAssert(excel.convertFromTitle("ZZZZZZ") == 321272406, "wrong answer")
        }
        
        //
        
    }
    
    func testCIFNITValidation()
    {
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "a58818501") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateDNI(candidateDNI: "38119995w") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "F08216863") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "j22382949") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "P0200100f") == true, "wrong answer")
        //DNIS1
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "62650219J") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "35761086L") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "07348726L") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "02363193N") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "29131633V") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "14758063K") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "71499401Z") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "39718897J") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "18076940K") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "01133210T") == true, "wrong answer")
        //DNIS2
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "61404140M") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "60088333M") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "93673759A") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "94158488F") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "84208059E") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "03293480H") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "52313106C") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "20430921K") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "44535312K") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "75910828H") == true, "wrong answer")
        //NIES1
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Z5208783R") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Y9385597R") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Z6716416F") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X6514670N") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Z3294580L") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Y2718340F") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Z4555342J") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Z4572024C") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Y7613762V") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X3953244G") == true, "wrong answer")
        //NIES2
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X5965007A") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X1061446L") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X8502916T") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Z4621338E") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X1699388X") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Y2388638X") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X0187312T") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X8099942D") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X2936278Y") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "X3685367P") == true, "wrong answer")
        //CIFS1
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "H06321491") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "C78970670") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "H24647794") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "B73081317") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "P0288479I") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "J37033826") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "D1225387H") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "Q5630031B") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "J3574987H") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "D2086707C") == true, "wrong answer")
        //CIFS2
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "B55294839") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "P3547062D") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "P8406183G") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "S7959527H") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "B07080641") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "P4733466I") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "S3083156D") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "F79247318") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "S6981484F") == true, "wrong answer")
        XCTAssert(CIFNITValidation.validateCIF(cifCandidate: "V7937974I") == true, "wrong answer")
    }
    
    
    func testMoveZeroes()
    {
        self.measure {
            let zeroes = MoveZeroes()
            var numeros = [0,1,0,3,12]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,3,12,0,0]), "wrong answer")
            numeros = [1,0,2,3,45,6,0]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,2,3,45,6,0,0]), "wrong answer")
            numeros = [1,0,2,3,45,6,0,0]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,2,3,45,6,0,0,0]), "wrong answer")
            numeros = [1,0,2,3,45,6,0,0,0,10,15,-1]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,2,3,45,6,10,15,-1,0,0,0,0]), "wrong answer")
            numeros = [0,0,0,0,0]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([0,0,0,0,0]), "wrong answer")
            numeros = [1,2,3,4,5]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,2,3,4,5]), "wrong answer")
            numeros = [0]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([0]), "wrong answer")
            numeros = [0,0,0,0,0,1,2,3,4,5]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,2,3,4,5,0,0,0,0,0]), "wrong answer")
            numeros = [1,2,0,0,0,1,2,3,4,5]
            zeroes.moveZeroes(&numeros)
            XCTAssert(numeros.elementsEqual([1,2,1,2,3,4,5,0,0,0]), "wrong answer")
        }
        
        /*XCTAssert(ZigZagConversor.convert("AB",1) == "AB", "wrong answer")
         XCTAssert(ZigZagConversor.convert("ABC",2) == "ACB", "wrong answer")
         XCTAssert(ZigZagConversor.convert("ABC",1) == "ABC", "wrong answer")
         XCTAssert(ZigZagConversor.convert("PAYPALISHIRING",3) == "PAHNAPLSIIGYIR", "wrong answer")
         XCTAssert(ZigZagConversor.convert("PAYPALISHIRING",4) == "PINALSIGYAHRPI", "wrong answer")
         XCTAssert(ZigZagConversor.convert("PAYPALISHIRING",14) == "PAYPALISHIRING", "wrong answer")
         XCTAssert(ZigZagConversor.convert("P",4) == "P", "wrong answer")
         XCTAssert(ZigZagConversor.convert("",1) == "", "wrong answer")*/
    }
    
    func testZigZagConvertion()
    {
        let ZigZagConversor = ZigZagConvertion()
        XCTAssert(ZigZagConversor.convert("AB",1) == "AB", "wrong answer")
        XCTAssert(ZigZagConversor.convert("ABC",2) == "ACB", "wrong answer")
        XCTAssert(ZigZagConversor.convert("ABC",1) == "ABC", "wrong answer")
        XCTAssert(ZigZagConversor.convert("PAYPALISHIRING",3) == "PAHNAPLSIIGYIR", "wrong answer")
        XCTAssert(ZigZagConversor.convert("PAYPALISHIRING",4) == "PINALSIGYAHRPI", "wrong answer")
        XCTAssert(ZigZagConversor.convert("PAYPALISHIRING",14) == "PAYPALISHIRING", "wrong answer")
        XCTAssert(ZigZagConversor.convert("P",4) == "P", "wrong answer")
        XCTAssert(ZigZagConversor.convert("",1) == "", "wrong answer")
    }
    
    func testReverseInteger()
    {
        let reverseIntegerProblem = ReverseInteger()
        XCTAssert(reverseIntegerProblem.reverse(102) == 201, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(1534236469) == 0, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(1) == 1, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(10) == 1, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(100) == 1, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(1000) == 1, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(10000) == 1, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(300) == 3, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(123) == 321, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(-123) == -321, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(-321578410) == -14875123, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(-501) == -105, "wrong answer")
        XCTAssert(reverseIntegerProblem.reverse(500000105) == 501000005, "wrong answer")
    }
    
    
    func testHappyNumbers()
    {
        let happyNumberTest = HappyNumber()
        self.measure {
            XCTAssert(happyNumberTest.isHappy(19) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(99999) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(10000) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(99990) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(199) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(1554) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(66) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(118) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(12) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(13) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(1122) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(5555) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(5554) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(5553) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(20) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(10000051) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(4444871) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(777777777) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(500050054) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(1554) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(66) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(118) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(12) == false, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(13) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(1122) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(5555) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(5554) == true, "wrong answer")
            XCTAssert(happyNumberTest.isHappy(5553) == false, "wrong answer")
        }
    }
    
    
    
    func testValidAnagrams(){
        var words = [String]()
        var anagrams = [String]()
        
        words.append("reinier")
        anagrams.append("rreeiin")
        words.append("jamon")
        anagrams.append("monja")
        words.append("anagram")
        anagrams.append("nagaram")
        words.append("cat")
        anagrams.append("rat")
        words.append("reinier")
        anagrams.append("rreeiin")
        words.append("jamon")
        anagrams.append("monja")
        words.append("anagram")
        anagrams.append("nagaram")
        words.append("cat")
        anagrams.append("rat")
        words.append("reinier")
        anagrams.append("rreeiin")
        words.append("jamon")
        anagrams.append("monja")
        words.append("anagram")
        anagrams.append("nagaram")
        words.append("cat")
        anagrams.append("rat")
        words.append("reinier")
        anagrams.append("rreeiin")
        words.append("jamon")
        anagrams.append("monja")
        words.append("anagram")
        anagrams.append("nagaram")
        words.append("cat")
        anagrams.append("rat")
        words.append("reinier")
        anagrams.append("rreeiin")
        words.append("jamon")
        anagrams.append("monja")
        words.append("mirada")
        anagrams.append("aroimd")
        words.append("cat")
        anagrams.append("rat")
        words.append("reinier")
        anagrams.append("rreniin")
        words.append("jaton")
        anagrams.append("monja")
        words.append(" a")
        anagrams.append("a ")
        let bigWord1 = ""
        
        let bigword2 = ""
        
        let validAnagram = ValidAnagram()
        self.measure {
            XCTAssert(validAnagram.isAnagram1("anagram", "nagaram"), "is not anagram")
            XCTAssert(validAnagram.isAnagram1("cat", "rat") == false, "is false anagram")
            XCTAssert(validAnagram.isAnagram1(bigWord1, bigword2), "is not anagram")
            XCTAssert(validAnagram.isAnagram1("reinier", "rreeiin"), "is not anagram")
        }
        
        
    }
    
}
